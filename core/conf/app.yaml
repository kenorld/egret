################################################################################
# Egret configuration file
# See:
#   http://egret.github.io/manual/appconf.html
#   for more detailed documentation.
################################################################################

# This sets the `AppName` variable which can be used in your code as
#   `if egret.AppName {...}`
name: Egret

# A secret string which is passed to cryptographically sign the cookie to prevent
# (and detect) user modification.
# Keep this string secret or users will be able to inject arbitrary cookie values
# into your application
secret: c59946sWnCM2STIjFeSlbLw6T60TECGApDDINSfvxSXepCeGqMhriQqYujpobhyX

serve:
  #tcp|unix
  network: tcp
  # The IP address on which to listen.
  addr: ""
  # The port on which to listen.
  port: 9090

  tls:
    enabled: false
    # Path to an X509 certificate file, if using SSL.
    # cert: ""
    # Path to an X509 certificate key, if using SSL.
    # key: ""
  letsencrypt:
    enabled: true
    cache_dir: ""

  # unix_file_mode: 0666

cookie:
  # For any cookies set by Egret (Session,Flash,Error) these properties will set
  # the fields of:
  # http://golang.org/pkg/net/http/#Cookie
  #
  # The HttpOnly attribute is supported by most modern browsers. On a supported
  # browser, an HttpOnly session cookie will be used only when transmitting HTTP
  # (or HTTPS) requests, thus restricting access from other, non-HTTP APIs (such
  # as JavaScript). This restriction mitigates, but does not eliminate the threat
  # of session cookie theft via cross-site scripting (XSS). This feature applies
  # only to session-management cookies, and not other browser cookies.
  http_only: false

  # Each cookie set by Egret is prefixed with this string.
  prefix: EGRET

  # A secure cookie has the secure attribute enabled and is only used via HTTPS,
  # ensuring that the cookie is always encrypted when transmitting from client to
  # server. This makes the cookie less likely to be exposed to cookie theft via
  # eavesdropping.
  secure: false

  # Limit cookie access to a given domain
  #domain: ""

  # Define when your session cookie expires. Possible values:
  # "720h"
  #   A time duration (http://golang.org/pkg/time/#ParseDuration) after which
  #   the cookie expires and the session is invalid.
  # "session"
  #   Sets a session cookie which invalidates the session when the user close
  #   the browser.
  expires: "720h"

format:
  # The date format used by Egret. Possible formats defined by the Go `time`
  # package (http://golang.org/pkg/time/#Parse)
  date: "01/22/2006"
  datetime: "01/22/2006 15:04"

template:
  native:
    enabled: true
    extensions: ".html"
    root: "/"
    layout: ""

  markdown:
    enabled: true
    extensions: ".md,.markdown"

render:
  # Determines whether the template rendering should use chunked encoding.
  # Chunked encoding can decrease the time to first byte on the client side by
  # sending data before the entire template has been fully rendered.
  chunked: false
  compressed: true

################################################################################
# Section: dev
# This section is evaluated when running Egret in dev mode. Like so:
#   `egret run path/to/myapp`
"[dev]":
  # This sets `DevMode` variable to `true` which can be used in your code as
  #   `if egret.DevMode {...}`
  #   or in your templates with
  #   `<no value>`
  dev_mode: true

  serve:
    letsencrypt:
      enabled: false

  render:
    # Pretty print JSON/XML when calling RenderJson/RenderXml
    pretty: true

  # Automatically watches your applicaton files and recompiles on-demand
  watch:
    enabled: true
    #eager||normal
    mode: normal
    

  logger:
    outputs: {_: ["stdout"], error: ["stderr"]}
    level: "info"
    format: "console"

################################################################################
# Section: prod
# This section is evaluated when running Egret in production mode. Like so:
#   `egret run path/to/myapp prod`
# See:
#  [dev] section for documentation of the various settings
"[prod]":
  dev_mode: false
  pretty: false

  watch:
    enabled: false

  logger:
    outputs: {_: ["stdout"], error: ["stderr"]}
    level: "info"
    format: "json"
